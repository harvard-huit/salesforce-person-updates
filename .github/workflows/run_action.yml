name: Default Action Run
run-name: ${{inputs.action}} run on ${{ inputs.environment }} for ${{ inputs.salesforce_instance_id }}

on:
  workflow_dispatch:
    inputs:
      environment: 
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'test'
          - 'stage'
          - 'prod'
        required: true
      salesforce_instance_id:
        description: the salesforce instance id (from dynamo)
        type: string
        required: true
        default: 'huitsalescloud-huitfull'
      action:
        type: choice
        required: true
        default: 'test'
        options: 
          - 'test'
          # - 'cleanup-updateds'
          # - 'defunct-accounts-check'
          # - 'defunct-contacts-check'
          # - 'defunct-contacts-remove'
          # - 'remove-unaffiliated-affiliations'
          # - 'static-query'
          - 'duplicate-check'
      debug:
        type: choice
        required: false
        default: 'False'
        options:
          - 'True'
          - 'False'
      cpu:
        type: choice
        required: false
        default: '1024'
        options:
          - '1024'
          - '2048'
      memory:
        type: choice
        required: false
        default: '4096'
        options:
          - '2048'
          - '3072'
          - '4096'
          - '5120'
          - '6144'
          - '7168'
          - '8192'
          - '16384'
  workflow_call:
    inputs:
      environment: 
        type: string
        required: true
      salesforce_instance_id:
        type: string
        required: true
      action:
        type: string
        required: true
      debug:
        type: string
        required: false
      cpu:
        type: string
        required: false
        default: '1024'
      memory:
        type: string
        required: false
        default: '4096'


defaults:
  run:
    shell: bash

jobs:
  action_run: 
    name: ${{ inputs.action }} on ${{ inputs.environment }} for ${{ inputs.salesforce_instance_id }}
    environment: ${{ inputs.environment }}
    runs-on: arc-runner-set-huit
    # runs-on: [ ubuntu-latest ]
    container:
      image: amazonlinux:2023
      options: --user root

    steps:

      # NOTE: role-duration-seconds is the maximum duration for the role session (21600 is 6 hours)
      - name: Login to AWS with a service account / iam user
        uses: HUIT/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD }}
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/AutomationDeployRole'
          role-duration-seconds: 21600
          role-session-name: MyDeploySession
          role-skip-session-tagging: true
          role-external-id: ${{ secrets.EXTERNAL_ID }}

      - name: Install AWS CLI
        run: |
          yum install -y aws-cli
          aws --version  

      - name: get current identity 
        run: aws sts get-caller-identity

      - name: Create Overrides
        run: |
          CONTAINER_OVERRIDES='[ 
            {
              "name": "aais-services-${{ inputs.environment }}-feed-salesforce-person-updates", 
              "cpu": ${{ inputs.cpu }},
              "memory": ${{ inputs.memory }},
              "environment": [ 
                {
                  "name": "SALESFORCE_INSTANCE_ID", 
                  "value": "${{ inputs.salesforce_instance_id }}"
                }, {
                  "name": "TABLE_NAME", 
                  "value": "${{ vars.TABLE_NAME }}"
                }, {
                  "name": "action", 
                  "value": "${{ inputs.action }}"
                }, {
                  "name": "DEBUG", 
                  "value": "${{ inputs.debug }}"
                }
              ]
            } 
          ]'
          CONTAINER_OVERRIDES=$(echo "$CONTAINER_OVERRIDES" | tr -d '\n')
          echo "CONTAINER_OVERRIDES=$CONTAINER_OVERRIDES" >> $GITHUB_ENV
          echo "## Container Overrides" >> $GITHUB_STEP_SUMMARY
          echo "$CONTAINER_OVERRIDES" >> $GITHUB_STEP_SUMMARY

      - name: Run ${{ inputs.environment }} ${{ inputs.action }} 
        run: |
            TASK_ARN=$(aws ecs run-task \
              --cluster aais-services-${{ inputs.environment }}-cluster \
              --overrides '{"cpu": "${{ inputs.cpu }}", "memory": "${{ inputs.memory }}", "containerOverrides": ${{ env.CONTAINER_OVERRIDES }} }' \
              --task-definition arn:aws:ecs:us-east-1:${{ vars.AWS_ACCOUNT }}:task-definition/aais-services-${{ inputs.environment }}-feed-salesforce-person-updates \
              --network-configuration '{ "awsvpcConfiguration": { "assignPublicIp":"DISABLED", "securityGroups": ["${{ vars.SECURITY_GROUP }}"], "subnets": ["${{ vars.SUBNET }}"]}}' \
              --launch-type FARGATE \
              --query 'tasks[0].taskArn' \
              --output text)
            echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV
    
      # Note: stoppedReason needs to be last in the read list as it may contain spaces
      - name: Wait for task to complete
        run: |
          while true; do     
            read lastStatus stopCode exitCode stoppedReason <<< $(aws ecs describe-tasks --cluster aais-services-${{ inputs.environment }}-cluster --tasks ${{ env.TASK_ARN }} --query 'tasks[0].[lastStatus, stopCode, containers[0].exitCode, stoppedReason]' --output text)
            echo "Task status: $lastStatus"
            echo "Task stop code: $stopCode"
            echo "Task exit code: $exitCode"
            echo "Task stopped reason: $stoppedReason"
            if [[ "$stopCode" == "EssentialContainerExited" || "$stopCode" == "UserInitiated" ]]; then
              if [[ "$exitCode" != "None" ]]; then
                echo "Task failed with exit code $exitCode with reason: $stoppedReason"
                echo "Task failed with exit code $exitCode with reason: $stoppedReason" >> $GITHUB_STEP_SUMMARY
                exit 1
              else
                echo "Task completed successfully. $stoppedReason"
                echo "Task completed successfully. $stoppedReason" >> $GITHUB_STEP_SUMMARY
                exit 0
              fi
              elif [[ "$lastStatus" == "STOPPED" ]]; then
                echo "Task stopped with stop code $stopCode with reason: $stoppedReason and exit code: $exitCode"
                echo "Task stopped with stop code $stopCode with reason: $stoppedReason and exit code: $exitCode" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
            sleep 10
          done