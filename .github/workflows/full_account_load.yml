name: Full Account Data Load
run-name: Full Account data load on ${{ github.event.inputs.environment }} for ${{ github.event.inputs.salesforce_instance_id }}

on:
  workflow_dispatch:
    inputs:
      environment: 
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'test'
          - 'stage'
          - 'prod'
        required: true
      salesforce_instance_id:
        description: the salesforce instance id (from dynamo)
        type: string
        required: true
        default: 'huit-full-sandbox'
      debug:
        type: choice
        required: false
        default: 'False'
        options:
          - 'True'
          - 'False'

env:
  AWS_REGION: us-east-1

defaults:
  run:
    shell: bash

jobs:
  data_load: 
    name: Full account data load on ${{ github.event.inputs.environment }} for ${{ github.event.inputs.salesforce_instance_id }}
    runs-on: [ ubuntu-latest ]

    steps:

      - name: Set admints-dev environment vars
        if: ${{ github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'test' }}
        run: |
          echo "account=001980101248" >> $GITHUB_ENV
          echo "account_name=admintsdev" >> $GITHUB_ENV
          echo "security_group=sg-07d8897b8146667d1" >> $GITHUB_ENV
          echo "subnet=subnet-b1d4cac7" >> $GITHUB_ENV
          echo "TABLE_NAME=aais-services-salesforce-person-updates-dev" >> $GITHUB_ENV


      - name: Set admints environment vars
        if: ${{ github.event.inputs.environment == 'stage' || github.event.inputs.environment == 'prod' }}
        run: |
          echo "account=949726781110" >> $GITHUB_ENV
          echo "account_name=admints" >> $GITHUB_ENV
          echo "security_group=sg-0d4440255bb6c7b71" >> $GITHUB_ENV
          echo "subnet=subnet-152e3063" >> $GITHUB_ENV
          echo "TABLE_NAME=aais-services-salesforce-person-updates-${{ github.event.inputs.environment }}" >> $GITHUB_ENV
  
      - name: Login to AWS with a service account / iam user
        uses: HUIT/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ env.account }}:role/AutomationDeployRole'
          role-duration-seconds: 1200
          role-session-name: MyDeploySession
          role-skip-session-tagging: true
          role-external-id: ${{ secrets.EXTERNAL_ID }}

      - name: log current identity
        run: aws sts get-caller-identity

      - name: Create Overrides
        run: |
          CONTAINER_OVERRIDES='[ 
            {
              "name": "aais-services-${{ github.event.inputs.environment }}-feed-salesforce-person-updates", 
              "cpu": ${{ github.event.inputs.cpu }},
              "memory": ${{ github.event.inputs.memory }},
              "environment": [ 
                {
                  "name": "SALESFORCE_INSTANCE_ID", 
                  "value": "${{ inputs.salesforce_instance_id }}"
                }, {
                  "name": "TABLE_NAME", 
                  "value": "${{ env.TABLE_NAME }}"
                }, {
                  "name": "action", 
                  "value": "full-account-load"
                }, {
                  "name": "DEBUG", 
                  "value": "${{ inputs.debug }}"
                }
              ]
            } 
          ]'
          CONTAINER_OVERRIDES=$(echo "$CONTAINER_OVERRIDES" | tr -d '\n')
          echo "CONTAINER_OVERRIDES=$CONTAINER_OVERRIDES" >> $GITHUB_ENV

      - name: Run ${{ inputs.environment }} full data load on [${{ inputs.people }}]
        run: |
          aws ecs run-task \
            --cluster aais-services-${{ inputs.environment }}-cluster \
            --overrides '{"containerOverrides": ${{ env.CONTAINER_OVERRIDES }} }' \
            --task-definition arn:aws:ecs:us-east-1:${{ env.account }}:task-definition/aais-services-${{ inputs.environment }}-feed-salesforce-person-updates \
            --network-configuration '{ "awsvpcConfiguration": { "assignPublicIp":"DISABLED", "securityGroups": ["${{ env.security_group }}"], "subnets": ["${{ env.subnet }}"]}}' \
            --launch-type FARGATE
  
