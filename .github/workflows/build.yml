name: Build Image
run-name: Build Image ${{ inputs.version }}

on:
  push:
    branches: [ dev ]
    paths: 
        - 'src/**'
        - 'config.schema.json'
        - 'Dockerfile'
        - 'gunicorn.sh'
        - 'requirements.txt'
        - '.github/workflows/build.yml'
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true

env:
  version: ${{ github.event.inputs.version }}
  branch: ${{ github.ref_name }}

defaults:
  run:
    shell: bash

jobs:
  unittest:
    name: Running Unit tests
    runs-on: ubuntu-latest
    container:
      image: python:3.9
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # with: 
        #   path: ./salesforce

      - name: Create virtual env
        run: |
          python -m venv env

      - name: Get requirements
        run: |
          source env/bin/activate
          python -m pip config --cache-dir env set global.extra-index-url https://artifactory.huit.harvard.edu/artifactory/api/pypi/ats-python/simple
          python -m pip install -r src/requirements.txt

      - name: Run tests
        run: | 
          source env/bin/activate
          output=$(python -m unittest discover -s src -p *_test.py 2>&1)
          if [ $? -ne 0 ]; then
            echo "## Unit Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "```">> $GITHUB_STEP_SUMMARY
            echo "$output">> $GITHUB_STEP_SUMMARY
            echo "```">> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>Click to see unit test output</summary>" >> $GITHUB_STEP_SUMMARY
            echo "```">> $GITHUB_STEP_SUMMARY
            echo "$output">> $GITHUB_STEP_SUMMARY
            echo "```">> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

  versions:
    name: Get all Deployed Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with: 
          path: ./checkout
      - name: Get Dev Version
        id: get_dev_version
        uses: HUIT/aais-ecs-infrastructure/actions/get-version@develop
        with:
          ansible_vars: ./checkout/ansible_vars/dev_ansible_vars.yml
      - name: Get Test Version
        if: inputs.version != null
        id: get_test_version
        uses: HUIT/aais-ecs-infrastructure/actions/get-version@develop
        with:
          ansible_vars: ./checkout/ansible_vars/test_ansible_vars.yml
      - name: Get Stage Version
        if: inputs.version != null
        id: get_stage_version
        uses: HUIT/aais-ecs-infrastructure/actions/get-version@develop
        with:
          ansible_vars: ./checkout/ansible_vars/stage_ansible_vars.yml
      - name: Get Prod Version
        if: inputs.version != null
        id: get_prod_version
        uses: HUIT/aais-ecs-infrastructure/actions/get-version@develop
        with:
          ansible_vars: ./checkout/ansible_vars/prod_ansible_vars.yml

      - name: JSON Output
        id: json_output
        run: |
          updates=$(python - <<EOF
          import json
          updates = []
          if "${{ steps.get_dev_version.outputs.version }}" != "":
            if "${{ inputs.version }}" == "${{ steps.get_dev_version.outputs.version }}" or "${{ inputs.version }}" == "":
              updates.append({"env": "dev", "version": "${{ steps.get_dev_version.outputs.version }}"})
            if "${{ inputs.version }}" != "":
              if "${{ inputs.version }}" == "${{ steps.get_test_version.outputs.version }}":
                updates.append({"env": "test", "version": "${{ steps.get_test_version.outputs.version }}"})
              if "${{ inputs.version }}" == "${{ steps.get_stage_version.outputs.version }}":
                updates.append({"env": "stage", "version": "${{ steps.get_stage_version.outputs.version }}"})
              if "${{ inputs.version }}" == "${{ steps.get_prod_version.outputs.version }}":
                updates.append({"env": "prod", "version": "${{ steps.get_prod_version.outputs.version }}"})
          print(json.dumps(updates))
          EOF
          ) 
          echo "## Updates" >> $GITHUB_STEP_SUMMARY
          echo "$updates">> $GITHUB_STEP_SUMMARY
          echo "updates=$updates">> $GITHUB_OUTPUT
    outputs:
      dev: ${{ steps.get_dev_version.outputs.version }}
      prod: ${{ steps.get_prod_version.outputs.version }}
      updates: ${{ steps.json_output.outputs.updates }}

  build:
    name: Build Code ${{ inputs.version }}
    needs: [unittest, versions]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: ./checkout

      - name: Which Version
        id: which_version
        run: |
          if [ -z "${{ inputs.version }}" ]; then
            echo "Version from dev_ansible_vars: ${{ needs.versions.outputs.dev }}"
            echo "version=${{ needs.versions.outputs.dev }}" >> $GITHUB_OUTPUT
          else
            echo "Version from input: ${{ inputs.version }}"
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          fi
      - name: Build
        run: |
          cd checkout
          docker build --build-arg VERSION=${{ steps.which_version.outputs.version }} -t artifactory.huit.harvard.edu/aais-docker-local/salesforce-person-updates:${{ steps.which_version.outputs.version }} .

      - name: Push to Artifactory
        run: |
          docker login artifactory.huit.harvard.edu --username "${{ secrets.ARTIFACTORY_USER }}" --password "${{ secrets.ARTIFACTORY_PWD }}"
          docker push artifactory.huit.harvard.edu/aais-docker-local/salesforce-person-updates:${{ steps.which_version.outputs.version }}


  deploys:
    name: Deploys
    if: needs.versions.outputs.updates != '[]'
    needs: [versions, build]
    strategy:
      fail-fast: false
      matrix:
        versions: ${{ fromJson(needs.versions.outputs.updates) || '[]' }}
    uses: ./.github/workflows/deploy.yml
    with: 
      version: ${{ matrix.versions.version }}
      environment: ${{ matrix.versions.env }}
    secrets: inherit


  test_production:
    name: Test Production
    if: needs.versions.outputs.prod != ''
    needs: [versions, deploys]
    uses: ./.github/workflows/test_instances.yml
    with:
      environment: prod
    secrets: inherit