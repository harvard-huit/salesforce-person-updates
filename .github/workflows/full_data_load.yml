name: Full Person Data Load
run-name: Full data load on ${{ inputs.environment }} for ${{ inputs.salesforce_instance_id }}

on:
  workflow_dispatch:
    inputs:
      environment: 
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'test'
          - 'stage'
          - 'prod'
        required: true
      salesforce_instance_id:
        description: the salesforce instance id (from dynamo)
        type: string
        required: true
        default: 'huit-full-sandbox'
      record_limit:
        type: number
        required: false
        default: -1
      batch_size:
        type: number
        required: false
        default: 800
      batch_thread_count: 
        type: number
        required: false
        default: 5
      debug:
        type: choice
        required: false
        default: 'False'
        options:
          - 'True'
          - 'False'
      cpu:
        type: choice
        required: false
        default: '1024'
        options:
          - '1024'
          - '2048'
      memory:
        type: choice
        required: false
        default: '4096'
        options:
          - '2048'
          - '3072'
          - '4096'
          - '5120'
          - '6144'
          - '7168'
          - '8192'
          - '16384'
                            
defaults:
  run:
    shell: bash

jobs:
  data_load: 
    name: Full data load on ${{ inputs.environment }} for ${{ inputs.salesforce_instance_id }}
    environment: ${{ inputs.environment }}
    runs-on: [ ubuntu-latest ]

    steps:
      - name: Login to AWS with a service account / iam user
        uses: HUIT/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD }}
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/AutomationDeployRole'
          role-duration-seconds: 1200
          role-session-name: MyDeploySession
          role-skip-session-tagging: true
          role-external-id: ${{ secrets.EXTERNAL_ID }}

      - name: get current identity 
        run: aws sts get-caller-identity

      - name: Create Overrides
        run: |
          CONTAINER_OVERRIDES='[ 
            {
              "name": "aais-services-${{ inputs.environment }}-feed-salesforce-person-updates", 
              "cpu": ${{ inputs.cpu }},
              "memory": ${{ inputs.memory }},
              "environment": [ 
                {
                  "name": "SALESFORCE_INSTANCE_ID", 
                  "value": "${{ inputs.salesforce_instance_id }}"
                }, {
                  "name": "TABLE_NAME", 
                  "value": "${{ vars.TABLE_NAME }}"
                }, {
                  "name": "action", 
                  "value": "full-person-load"
                }, {
                  "name": "BATCH_SIZE", 
                  "value": "${{ inputs.batch_size }}"
                }, {
                  "name": "BATCH_THREAD_COUNT", 
                  "value": "${{ inputs.batch_thread_count }}"
                }, {
                  "name": "RECORD_LIMIT", 
                  "value": "${{ inputs.record_limit }}"
                }, {
                  "name": "DEBUG", 
                  "value": "${{ inputs.debug }}"
                }
              ]
            } 
          ]'
          CONTAINER_OVERRIDES=$(echo "$CONTAINER_OVERRIDES" | tr -d '\n')
          echo "CONTAINER_OVERRIDES=$CONTAINER_OVERRIDES" >> $GITHUB_ENV

      - name: Run ${{ inputs.environment }} full data load on [${{ inputs.people }}]
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster aais-services-${{ inputs.environment }}-cluster \
            --overrides '{"cpu": "${{ inputs.cpu }}", "memory": "${{ inputs.memory }}", "containerOverrides": ${{ env.CONTAINER_OVERRIDES }} }' \
            --task-definition arn:aws:ecs:us-east-1:${{ vars.AWS_ACCOUNT }}:task-definition/aais-services-${{ inputs.environment }}-feed-salesforce-person-updates \
            --network-configuration '{ "awsvpcConfiguration": { "assignPublicIp":"DISABLED", "securityGroups": ["${{ vars.SECURITY_GROUP }}"], "subnets": ["${{ vars.SUBNET }}"]}}' \
            --launch-type FARGATE \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV
  
      # TODO: github issue: https://github.huit.harvard.edu/HUIT/salesforce-person-updates/issues/74
      - name: Wait for task to complete
        run: |
          while true; do            
            aws ecs wait tasks-stopped --cluster aais-services-${{ inputs.environment }}-cluster --tasks ${{ env.TASK_ARN }} > /dev/null 2> error.log
            ERROR=$(cat error.log)
            if [[ "$ERROR" == "Waiter TasksStopped failed: Max attempts exceeded" ]]; then
              continue
            fi
            
            STOP_CODE=$(aws ecs describe-tasks --cluster aais-services-${{ inputs.environment }}-cluster --tasks ${{ env.TASK_ARN }} --query 'tasks[0].stopCode' --output text)
            if [[ "$STOP_CODE" == "EssentialContainerExited" ]]; then
              EXIT_CODE=$(aws ecs describe-tasks --cluster aais-services-${{ inputs.environment }}-cluster --tasks ${{ env.TASK_ARN }} --query 'tasks[0].containers[0].exitCode' --output text)
              if [[ "$EXIT_CODE" != "0" ]]; then
                STOPPED_REASON=$(aws ecs describe-tasks --cluster aais-services-${{ inputs.environment }}-cluster --tasks ${{ env.TASK_ARN }} --query 'tasks[0].stoppedReason' --output text)
        
                echo "Task failed with exit code $EXIT_CODE with reason: $STOPPED_REASON"
                exit 1
              else
                echo "Task completed successfully"
                exit 0
              fi

            else 
              echo "Task stopped with stop code $STOP_CODE"
              exit 1
            fi

